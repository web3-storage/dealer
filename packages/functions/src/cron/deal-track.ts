import * as Sentry from '@sentry/serverless'
import { Config } from 'sst/node/config'
import { Table } from 'sst/node/table'
import * as Delegation from '@ucanto/core/delegation'
import { fromString } from 'uint8arrays/from-string'

import { dealTrack } from '@dealer/core/src/workflow/deal-track'
import { connectTable } from '@spade-proxy/core/store'
import { getServiceSigner, getServiceConnection } from '@spade-proxy/core/service'

import { mustGetEnv } from '../utils'

Sentry.AWSLambda.init({
  environment: process.env.SST_STAGE,
  dsn: process.env.SENTRY_DSN,
  tracesSampleRate: 1.0,
})

export async function main() {
  // Construct context
  const {
    dealTableName: tableName,
    dealTableRegion: region,
    dealTrackerDid,
    dealTrackerUrl,
    dealTrackerProof,
    privateKey
  } = getLambdaEnv()
  const issuer = getServiceSigner({
    privateKey
  })
  const tableClient = connectTable({ region })
  const dealTrackerServiceConnection = getServiceConnection({
    did: dealTrackerDid,
    url: dealTrackerUrl
  })
  const dealTrackerProofs = []
  if (dealTrackerProof) {
    const proof = await Delegation.extract(fromString(dealTrackerProof, 'base64pad'))
      if (!proof.ok) throw new Error('failed to extract proof', { cause: proof.error })
      dealTrackerProofs.push(proof.ok)
  }

  // Trigger workflow
  const { ok, error } = await dealTrack({
    tableClient,
    tableName,
    dealTrackerServiceConnection,
    dealTrackerInvocationConfig: {
      issuer,
      audience: dealTrackerServiceConnection.id,
      with: issuer.did(),
      proofs: dealTrackerProofs
    }
  })

  if (error) {
    console.error(error)
    return {
      statusCode: 500,
      body: error.message || 'failed to track deals'
    }
  }

  return {
    statusCode: 200,
    body: ok
  }
}

/**
 * Get Env validating it is set.
 */
function getLambdaEnv () {
  const { PRIVATE_KEY: privateKey } = Config
  return {
    dealTableName: Table['deal-store'].tableName,
    dealTableRegion: mustGetEnv('AWS_REGION'),
    dealTrackerDid: mustGetEnv('DEAL_TRACKER_DID'),
    dealTrackerUrl: mustGetEnv('DEAL_TRACKER_URL'),
    dealTrackerProof: process.env.DEAL_TRACKER_PROOF,
    privateKey
  }
}

// would be generated by sst, but requires `sst build` to be run, which calls out to aws; not great for CI
declare module 'sst/node/config' {
  export interface SecretResources {
    PRIVATE_KEY: {
      value: string
    }
  }
}

declare module 'sst/node/table' {
  export interface TableResources {
    'deal-store': {
      tableName: string;
    };
  }
}
